using System;
using System.Collections.Generic;
using System.IO;

public class HeatProduction
{
    private List<HeatDemand> _heatDemands;
    private GasBoiler _gasBoiler;
    private OilBoiler _oilBoiler;

    public HeatProduction(List<HeatDemand> heatDemands, GasBoiler gasBoiler, OilBoiler oilBoiler)
    {
        _heatDemands = heatDemands;
        _gasBoiler = gasBoiler;
        _oilBoiler = oilBoiler;
    }

    public void ProduceHeat()
    {
        double totalHeatDemand = 0;
        double totalCO2Emissions = 0;
        double totalHeatProduced = 0;
        double totalProductionCost = 0;

        foreach (HeatDemand heatDemand in _heatDemands)
        {
            bool isWinter = heatDemand.Time.Month < 4 || heatDemand.Time.Month > 9;
            double heatProduced = 0;
            double co2Emissions = 0;
            double productionCost = 0;

            if (isWinter)
            {
                // Calcular producción de calor para invierno
                double gasHeat = _gasBoiler.ProduceHeat(heatDemand.Demand);
                double oilHeat = _oilBoiler.ProduceHeat(heatDemand.Demand);

                heatProduced = gasHeat + oilHeat;
                co2Emissions = _gasBoiler.GetCO2Emissions(gasHeat) + _oilBoiler.GetCO2Emissions(oilHeat);
                productionCost = _gasBoiler.GetProductionCost(gasHeat) + _oilBoiler.GetProductionCost(oilHeat);
            }
            else (isSummer)
            {
                // Calcular producción de calor para verano
                heatProduced = _gasBoiler.ProduceHeat(heatDemand.Demand);
                co2Emissions = _gasBoiler.GetCO2Emissions(heatDemand.Demand);
                productionCost = _gasBoiler.GetProductionCost(heatDemand.Demand);
            }

            totalHeatDemand += heatDemand.Demand;
            totalHeatProduced += heatProduced;
            totalCO2Emissions += co2Emissions;
            totalProductionCost += productionCost;
        }

        Console.WriteLine($"Total Heat Demand: {totalHeatDemand} kWh");
        Console.WriteLine($"Total Heat Produced: {totalHeatProduced} kWh");
        Console.WriteLine($"Total CO2 Emissions: {totalCO2Emissions} kg");
        Console.WriteLine($"Total Production Cost: {totalProductionCost} DKK");
    }
}

public class HeatDemand
{
    public DateTime Time { get; set; }
    public double Demand { get; set; }
}

public class GasBoiler
{
    public double ProduceHeat(double heatDemand)
    {
        return heatDemand;
    }

    public double GetCO2Emissions(double heatDemand)
    {
        return heatDemand * 0.2; // Asumir 0.2 kg CO2/kWh
    }

    public double GetProductionCost(double heatDemand)
    {
        return heatDemand * 500; // 500 DKK/kWh
    }
}

public class OilBoiler
{
    public double ProduceHeat(double heatDemand)
    {
        return heatDemand;
    }

    public double GetCO2Emissions(double heatDemand)
    {
        return heatDemand * 0.3; // Asumir 0.3 kg CO2/kWh
    }

    public double GetProductionCost(double heatDemand)
    {
        return heatDemand * 700; // 700 DKK/kWh
    }
}

class Program
{
    static void Main(string[] args)
    {
        List<HeatDemand> heatDemands = new List<HeatDemand>();

        string[] lines = File.ReadAllLines("optimization_info.csv");

        foreach (string line in lines)
        {
            if (string.IsNullOrWhiteSpace(line)) continue; // Ignorar líneas vacías

            string[] values = line.Split(',');
            if (values.Length < 3) continue; // Asegurarse de que hay suficientes valores

            if (DateTime.TryParse($"{values[0]} {values[1]}", out DateTime dateTime) && 
                double.TryParse(values[2], out double demand))
            {
                HeatDemand heatDemand = new HeatDemand
                {
                    Time = dateTime,
                    Demand = demand
                };
                heatDemands.Add(heatDemand);
            }
        }

        GasBoiler gasBoiler = new GasBoiler();
        OilBoiler oilBoiler = new OilBoiler();

        HeatProduction heatProduction = new HeatProduction(heatDemands, gasBoiler, oilBoiler);
        heatProduction.ProduceHeat();
    }
}

