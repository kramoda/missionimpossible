using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class HeatProduction
{
    private List<HeatDemand> _heatDemands;
    private GasBoiler _gasBoiler;
    private OilBoiler _oilBoiler;
    private ElectricBoiler _electricBoiler;

    public HeatProduction(List<HeatDemand> heatDemands, GasBoiler gasBoiler, OilBoiler oilBoiler, ElectricBoiler electricBoiler)
    {
        _heatDemands = heatDemands;
        _gasBoiler = gasBoiler;
        _oilBoiler = oilBoiler;
        _electricBoiler = electricBoiler;
    }

    public void ProduceHeat(double electricityPrice)
    {
        double totalHeatDemand = 0;
        double totalCO2Emissions = 0;
        double totalHeatProduced = 0;
        double totalProductionCost = 0;

        foreach (HeatDemand heatDemand in _heatDemands)
        {
            bool isWinter = heatDemand.Time.Month < 4 || heatDemand.Time.Month > 9;
            double heatProduced = 0;
            double co2Emissions = 0;
            double productionCost = 0;

            if (isWinter)
            {
                // Both gas and oil boilers are working at max capacity
                heatProduced += _gasBoiler.ProduceHeat(heatDemand.Demand);
                heatProduced += _oilBoiler.ProduceHeat(heatDemand.Demand);
                co2Emissions += _gasBoiler.GetCO2Emissions(heatDemand.Demand);
                co2Emissions += _oilBoiler.GetCO2Emissions(heatDemand.Demand);
                productionCost += _gasBoiler.GetProductionCost(heatDemand.Demand);
                productionCost += _oilBoiler.GetProductionCost(heatDemand.Demand);
            }
            else
            {
                if (electricityPrice < 500)
                {
                    // Electric boiler is working at max capacity
                    heatProduced += _electricBoiler.ProduceHeat(heatDemand.Demand);
                    co2Emissions += _electricBoiler.GetCO2Emissions(heatDemand.Demand);
                    productionCost += _electricBoiler.GetProductionCost(heatDemand.Demand) + electricityPrice * heatDemand.Demand / 1000;
                }
                else
                {
                    // Only gas boiler is working at max capacity
                    heatProduced += _gasBoiler.ProduceHeat(heatDemand.Demand);
                    co2Emissions += _gasBoiler.GetCO2Emissions(heatDemand.Demand);
                    productionCost += _gasBoiler.GetProductionCost(heatDemand.Demand);
                }
            }

            totalHeatDemand += heatDemand.Demand;
            totalHeatProduced += heatProduced;
            totalCO2Emissions += co2Emissions;
            totalProductionCost += productionCost;
        }

        Console.WriteLine($"Total Heat Demand: {totalHeatDemand} kWh");
        Console.WriteLine($"Total Heat Produced: {totalHeatProduced} kWh");
        Console.WriteLine($"Total CO2 Emissions: {totalCO2Emissions} kg");
        Console.WriteLine($"Total Production Cost: {totalProductionCost} DKK");
    }
}

public class HeatDemand
{
    public DateTime Time { get; set; }
    public double Demand { get; set; }
}

public class GasBoiler
{
    public double ProduceHeat(double heatDemand)
    {
        return heatDemand;
    }

    public double GetCO2Emissions(double heatDemand)
    {
        return heatDemand * 0.2; // assume 0.2 kg CO2/kWh
    }

    public double GetProductionCost(double heatDemand)
    {
        return heatDemand * 500; // 500 DKK/kWh
    }
}

public class OilBoiler
{
    public double ProduceHeat(double heatDemand)
    {
        return heatDemand;
    }

    public double GetCO2Emissions(double heatDemand)
    {
        return heatDemand * 0.3; // assume 0.3 kg CO2/kWh
    }

    public double GetProductionCost(double heatDemand)
    {
        return heatDemand * 700; // 700 DKK/kWh
    }
}

public class ElectricBoiler
{
    public double ProduceHeat(double heatDemand)
    {
        return heatDemand;
    }

    public double GetCO2Emissions(double heatDemand)
    {
        return heatDemand * 0.1; // assume 0.1 kg CO2/kWh
    }

    public double GetProductionCost(double heatDemand)
    {
        return heatDemand * 50; // 50 DKK/kWh
    }
}

class Program
{
    static void Main(string[] args)
    {
        List<HeatDemand> heatDemands = new List<
    }
}